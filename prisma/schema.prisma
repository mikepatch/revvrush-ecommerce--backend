generator nestgraphql {
  provider    = "node node_modules/prisma-nestjs-graphql"
  output      = "../prisma/generated"
  reExport    = Directories
  emitBlocks  = ["inputs"]
  emitSingle  = true
  purgeOutput = true
}

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  name      String
  role      String   @default("USER")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  orders    Order[]
}

model ProductVariant {
  id        String                 @id @default(uuid())
  name      String
  stock     Int
  price     Int?
  productId String
  createdAt DateTime               @default(now())
  updatedAt DateTime               @updatedAt
  product   Product                @relation(fields: [productId], references: [id])
  options   ProductVariantOption[]
}

model ProductVariantOption {
  id               String         @id @default(uuid())
  productVariantId String
  name             String
  values           String[]
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  productVariant   ProductVariant @relation(fields: [productVariantId], references: [id])
}

model Product {
  id          String           @id @default(uuid())
  name        String
  price       Int
  slug        String
  categoryId  String
  images      String[]
  description String?
  orderId     String?
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  category    ProductCategory  @relation(fields: [categoryId], references: [id])
  variants    ProductVariant[]
  collections Collection[]
  cartItem    CartItem[]
  orderItem   OrderItem[]
}

model ProductCategory {
  id               String            @id @default(uuid())
  name             String
  slug             String
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  parentCategoryId String?
  products         Product[]
  parentCategory   ProductCategory?  @relation("parentCategory", fields: [parentCategoryId], references: [id])
  subCategories    ProductCategory[] @relation("parentCategory")
}

model Collection {
  id          String    @id @default(uuid())
  name        String
  description String
  slug        String
  coverImage  String
  products    Product[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Cart {
  id        String     @id @default(uuid())
  userId    String
  items     CartItem[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model CartItem {
  id        String   @id @default(uuid())
  cartId    String
  productId String
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  cart      Cart     @relation(fields: [cartId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])

  @@unique([cartId, productId])
}

enum OrderStatus {
  CREATED
  PAID
  COMPLETED
  CANCELLED
}

model Order {
  id          String      @id @default(uuid())
  userId      String
  items       OrderItem[]
  totalAmount Float
  status      OrderStatus
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  user        User        @relation(fields: [userId], references: [id])
}

model OrderItem {
  id        String   @id @default(uuid())
  orderId   String
  productId String
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  order     Order    @relation(fields: [orderId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])
}

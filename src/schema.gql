# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Cart {
  """Product createdAt"""
  createdAt: DateTime!

  """Cart ID"""
  id: ID!

  """Items in the cart"""
  items: [CartItem!]!

  """Product updatedAt"""
  updatedAt: DateTime!

  """User ID"""
  userId: ID!
}

type CartItem {
  """Cart ID"""
  cartId: ID!

  """Product createdAt"""
  createdAt: DateTime!

  """CartProduct ID"""
  id: ID!

  """Product"""
  product: Product!

  """Product ID"""
  productId: ID!

  """Product quantity"""
  quantity: Int!

  """Product updatedAt"""
  updatedAt: DateTime!
}

input CartItemListRelationFilter {
  every: CartItemWhereInput
  none: CartItemWhereInput
  some: CartItemWhereInput
}

input CartItemOrderByRelationAggregateInput {
  _count: SortOrder
}

input CartItemWhereInput {
  AND: [CartItemWhereInput!]
  NOT: [CartItemWhereInput!]
  OR: [CartItemWhereInput!]
  cart: CartRelationFilter
  cartId: StringFilter
  createdAt: DateTimeFilter
  id: StringFilter
  product: ProductRelationFilter
  productId: StringFilter
  quantity: IntFilter
  updatedAt: DateTimeFilter
}

type CartMeta {
  """Total price of the cart"""
  totalPrice: Float!
}

input CartRelationFilter {
  is: CartWhereInput
  isNot: CartWhereInput
}

input CartWhereInput {
  AND: [CartWhereInput!]
  NOT: [CartWhereInput!]
  OR: [CartWhereInput!]
  createdAt: DateTimeFilter
  id: StringFilter
  items: CartItemListRelationFilter
  updatedAt: DateTimeFilter
  userId: StringFilter
}

type CartWithMeta {
  """Cart"""
  data: Cart!

  """Cart meta"""
  meta: CartMeta!
}

type Collection {
  """Product collection cover image URL"""
  coverImage: String!
  createdAt: String!

  """Product collection description"""
  description: String

  """Product collection ID"""
  id: ID!

  """Product collection name"""
  name: String!

  """Product IDs in the collection"""
  productIds: [ID!]!

  """Products in the collection"""
  products: [Product!]!

  """Product collection slug"""
  slug: String!
  updatedAt: String!
}

input CollectionListRelationFilter {
  every: CollectionWhereInput
  none: CollectionWhereInput
  some: CollectionWhereInput
}

input CollectionOrderByRelationAggregateInput {
  _count: SortOrder
}

input CollectionWhereInput {
  AND: [CollectionWhereInput!]
  NOT: [CollectionWhereInput!]
  OR: [CollectionWhereInput!]
  coverImage: StringFilter
  createdAt: DateTimeFilter
  description: StringFilter
  id: StringFilter
  name: StringFilter
  productIds: StringNullableListFilter
  products: ProductListRelationFilter
  slug: StringFilter
  updatedAt: DateTimeFilter
}

input CreateCartInput {
  """User ID"""
  userId: ID!
}

input CreateCartItemInput {
  """Cart ID"""
  cartId: ID!

  """Product ID"""
  productId: ID!

  """Product quantity"""
  quantity: Int!
}

input CreateCollectionInput {
  """Product collection cover image URL"""
  coverImage: String!

  """Product collection description"""
  description: String

  """Product collection name"""
  name: String!

  """Product IDs in the collection"""
  productIds: [ID!]!
}

input CreateOrderInput {
  """Example field (placeholder)"""
  exampleField: Int!
}

"""New product category input"""
input CreateProductCategoryInput {
  """Product category name"""
  name: String!

  """Parent category ID"""
  parentCategoryId: String
}

input CreateProductInput {
  categoryId: String!
  description: String!
  images: [String]
  name: String!
  price: Float!
}

input CreateProductReviewInput {
  """Review content"""
  content: String

  """Review email"""
  email: String!

  """Review headline"""
  headline: String!

  """Review author"""
  name: String!

  """Review product id"""
  productId: ID!

  """Review rating"""
  rating: Int!
}

input CreateProductVariantInput {
  """Product variant name"""
  name: String!

  """Product variant options"""
  options: [CreateProductVariantOptionInput!]!

  """Product variant price"""
  price: Int

  """Product variant productId"""
  productId: String!

  """Product variant stock"""
  stock: Int! = 0
}

input CreateProductVariantOptionInput {
  """Product variant option name"""
  name: String!

  """Product variant option values"""
  values: [String!]!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

input DateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

input EnumOrderStatusFilter {
  equals: OrderStatus
  in: [OrderStatus!]
  not: NestedEnumOrderStatusFilter
  notIn: [OrderStatus!]
}

input FloatFilter {
  equals: Float
  gt: Float
  gte: Float
  in: [Float!]
  lt: Float
  lte: Float
  not: NestedFloatFilter
  notIn: [Float!]
}

input FloatNullableFilter {
  equals: Float
  gt: Float
  gte: Float
  in: [Float!]
  lt: Float
  lte: Float
  not: NestedFloatNullableFilter
  notIn: [Float!]
}

input IntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

input IntNullableFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntNullableFilter
  notIn: [Int!]
}

type ListMeta {
  """Total number of records"""
  total: Int!
}

type Mutation {
  """Add item to cart"""
  addItemToCart(createCartItemInput: CreateCartItemInput!): CartItem
  createCart(createCartInput: CreateCartInput!): Cart!
  createCollection(createCollectionInput: CreateCollectionInput!): Collection
  createOrder(createOrderInput: CreateOrderInput!): Order!
  createProduct(createProductInput: CreateProductInput!): Product!
  createProductCategory(createProductCategoryInput: CreateProductCategoryInput!): ProductCategory!
  createProductReview(createProductReviewInput: CreateProductReviewInput!): ProductReview!
  createProductVariant(createProductVariantInput: CreateProductVariantInput!): ProductVariant!
  removeCart(id: ID!): Cart!
  removeCollection(id: Int!): Collection!

  """Remove item from cart"""
  removeItemFromCart(cartItemId: ID!): CartItem
  removeOrder(id: Int!): Order!
  removeProduct(id: ID!): Product!
  removeProductCategory(id: ID!): ProductCategory!
  removeProductReview(id: Int!): ProductReview!
  removeProductVariant(id: Int!): ProductVariant!
  updateCart(id: ID!, updateCartInput: UpdateCartInput!): Cart!
  updateCartItem(cartItemId: ID!, data: UpdateCartItemInput!): CartItem!
  updateCollection(updateCollectionInput: UpdateCollectionInput!): Collection!
  updateOrder(updateOrderInput: UpdateOrderInput!): Order!
  updateProduct(id: ID!, updateProductInput: UpdateProductInput!): Product!
  updateProductCategory(id: ID!, updateProductCategoryInput: UpdateProductCategoryInput!): ProductCategory!
  updateProductReview(updateProductReviewInput: UpdateProductReviewInput!): ProductReview!
  updateProductVariant(updateProductVariantInput: UpdateProductVariantInput!): ProductVariant!
}

input NestedDateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

input NestedEnumOrderStatusFilter {
  equals: OrderStatus
  in: [OrderStatus!]
  not: NestedEnumOrderStatusFilter
  notIn: [OrderStatus!]
}

input NestedFloatFilter {
  equals: Float
  gt: Float
  gte: Float
  in: [Float!]
  lt: Float
  lte: Float
  not: NestedFloatFilter
  notIn: [Float!]
}

input NestedFloatNullableFilter {
  equals: Float
  gt: Float
  gte: Float
  in: [Float!]
  lt: Float
  lte: Float
  not: NestedFloatNullableFilter
  notIn: [Float!]
}

input NestedIntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

input NestedIntNullableFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntNullableFilter
  notIn: [Int!]
}

input NestedStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input NestedStringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

enum NullsOrder {
  first
  last
}

type Order {
  """Example field (placeholder)"""
  exampleField: Int!
}

input OrderItemListRelationFilter {
  every: OrderItemWhereInput
  none: OrderItemWhereInput
  some: OrderItemWhereInput
}

input OrderItemOrderByRelationAggregateInput {
  _count: SortOrder
}

input OrderItemWhereInput {
  AND: [OrderItemWhereInput!]
  NOT: [OrderItemWhereInput!]
  OR: [OrderItemWhereInput!]
  createdAt: DateTimeFilter
  id: StringFilter
  order: OrderRelationFilter
  orderId: StringFilter
  product: ProductRelationFilter
  productId: StringFilter
  quantity: IntFilter
  updatedAt: DateTimeFilter
}

input OrderListRelationFilter {
  every: OrderWhereInput
  none: OrderWhereInput
  some: OrderWhereInput
}

input OrderRelationFilter {
  is: OrderWhereInput
  isNot: OrderWhereInput
}

enum OrderStatus {
  CANCELLED
  COMPLETED
  CREATED
  PAID
}

input OrderWhereInput {
  AND: [OrderWhereInput!]
  NOT: [OrderWhereInput!]
  OR: [OrderWhereInput!]
  createdAt: DateTimeFilter
  id: StringFilter
  items: OrderItemListRelationFilter
  status: EnumOrderStatusFilter
  totalPrice: FloatFilter
  updatedAt: DateTimeFilter
  user: UserRelationFilter
  userId: StringFilter
}

type Product {
  """Product avg rating"""
  avgRating: Float

  """Product category"""
  category: ProductCategory

  """Product category id"""
  categoryId: ID!

  """Product collections"""
  collections: [Collection]

  """Product createdAt"""
  createdAt: DateTime!

  """Product description"""
  description: String!

  """Product ID"""
  id: ID!

  """Product images"""
  images: [String]!

  """Product name"""
  name: String!

  """Product orderId"""
  orderId: ID!

  """Product price"""
  price: Int!

  """Product reviews"""
  reviews: [ProductReview]

  """Product slug"""
  slug: String!

  """Product updatedAt"""
  updatedAt: DateTime!

  """Product variants"""
  variants: [ProductVariant]
}

type ProductCategoriesList {
  """List of product categories"""
  data: [ProductCategory!]!
}

type ProductCategory {
  """Category created at"""
  createdAt: DateTime!

  """Product category ID"""
  id: ID!

  """Product category name"""
  name: String!

  """Parent category ID"""
  parentCategoryId: ID

  """Products in this category"""
  products: [Product]!

  """Product category slug"""
  slug: String

  """Category updated at"""
  updatedAt: DateTime!
}

input ProductCategoryListRelationFilter {
  every: ProductCategoryWhereInput
  none: ProductCategoryWhereInput
  some: ProductCategoryWhereInput
}

input ProductCategoryNullableRelationFilter {
  is: ProductCategoryWhereInput
  isNot: ProductCategoryWhereInput
}

input ProductCategoryOrderByRelationAggregateInput {
  _count: SortOrder
}

input ProductCategoryOrderByWithRelationInput {
  createdAt: SortOrder
  id: SortOrder
  name: SortOrder
  parentCategory: ProductCategoryOrderByWithRelationInput
  parentCategoryId: SortOrderInput
  products: ProductOrderByRelationAggregateInput
  slug: SortOrder
  subCategories: ProductCategoryOrderByRelationAggregateInput
  updatedAt: SortOrder
}

input ProductCategoryRelationFilter {
  is: ProductCategoryWhereInput
  isNot: ProductCategoryWhereInput
}

input ProductCategoryWhereInput {
  AND: [ProductCategoryWhereInput!]
  NOT: [ProductCategoryWhereInput!]
  OR: [ProductCategoryWhereInput!]
  createdAt: DateTimeFilter
  id: StringFilter
  name: StringFilter
  parentCategory: ProductCategoryNullableRelationFilter
  parentCategoryId: StringNullableFilter
  products: ProductListRelationFilter
  slug: StringFilter
  subCategories: ProductCategoryListRelationFilter
  updatedAt: DateTimeFilter
}

type ProductList {
  """List of products"""
  data: [Product!]!

  """List metadata"""
  meta: ListMeta!
}

input ProductListRelationFilter {
  every: ProductWhereInput
  none: ProductWhereInput
  some: ProductWhereInput
}

type ProductMeta {
  """Total number of reviews"""
  totalReviews: Int!
}

input ProductOrderByRelationAggregateInput {
  _count: SortOrder
}

input ProductOrderByWithRelationInput {
  avgRating: SortOrderInput
  cartItem: CartItemOrderByRelationAggregateInput
  category: ProductCategoryOrderByWithRelationInput
  categoryId: SortOrder
  collections: CollectionOrderByRelationAggregateInput
  createdAt: SortOrder
  description: SortOrderInput
  id: SortOrder
  images: SortOrder
  name: SortOrder
  orderId: SortOrderInput
  orderItem: OrderItemOrderByRelationAggregateInput
  price: SortOrder
  reviews: ProductReviewOrderByRelationAggregateInput
  slug: SortOrder
  updatedAt: SortOrder
  variants: ProductVariantOrderByRelationAggregateInput
}

input ProductRelationFilter {
  is: ProductWhereInput
  isNot: ProductWhereInput
}

type ProductReview {
  """Review content"""
  content: String

  """Review createdAt"""
  createdAt: DateTime!

  """Review email"""
  email: String!

  """Review headline"""
  headline: String!

  """Review ID"""
  id: ID!

  """Review author"""
  name: String!

  """Review product id"""
  productId: ID!

  """Review rating"""
  rating: Int!

  """Review updatedAt"""
  updatedAt: DateTime
}

type ProductReviewListMeta {
  """Average rating"""
  avgRating: Float!

  """Total number of record"""
  total: Int!
}

input ProductReviewListRelationFilter {
  every: ProductReviewWhereInput
  none: ProductReviewWhereInput
  some: ProductReviewWhereInput
}

type ProductReviewListWithMeta {
  """List of reviews"""
  data: [ProductReview!]!

  """List metadata"""
  meta: ProductReviewListMeta!
}

input ProductReviewOrderByRelationAggregateInput {
  _count: SortOrder
}

input ProductReviewOrderByWithRelationInput {
  content: SortOrderInput
  createdAt: SortOrder
  email: SortOrder
  headline: SortOrder
  id: SortOrder
  name: SortOrder
  product: ProductOrderByWithRelationInput
  productId: SortOrder
  rating: SortOrder
  updatedAt: SortOrder
}

input ProductReviewWhereInput {
  AND: [ProductReviewWhereInput!]
  NOT: [ProductReviewWhereInput!]
  OR: [ProductReviewWhereInput!]
  content: StringNullableFilter
  createdAt: DateTimeFilter
  email: StringFilter
  headline: StringFilter
  id: StringFilter
  name: StringFilter
  product: ProductRelationFilter
  productId: StringFilter
  rating: IntFilter
  updatedAt: DateTimeFilter
}

type ProductVariant {
  """Product variant createdAt"""
  createdAt: DateTime!

  """Product variant ID"""
  id: ID!

  """Product variant name"""
  name: String!

  """Product variant options"""
  options: [ProductVariantOption!]!

  """Product variant price"""
  price: Int

  """Product variant product"""
  product: Product!

  """Product variant productId"""
  productId: String!

  """Product variant stock"""
  stock: Int!

  """Product variant updatedAt"""
  updatedAt: DateTime!
}

input ProductVariantListRelationFilter {
  every: ProductVariantWhereInput
  none: ProductVariantWhereInput
  some: ProductVariantWhereInput
}

type ProductVariantOption {
  """Product variant option ID"""
  id: ID!

  """Product variant option name"""
  name: String!

  """Product variant option variantId"""
  productVariantId: String!

  """Product variant option values"""
  values: [String!]!
}

input ProductVariantOptionListRelationFilter {
  every: ProductVariantOptionWhereInput
  none: ProductVariantOptionWhereInput
  some: ProductVariantOptionWhereInput
}

input ProductVariantOptionWhereInput {
  AND: [ProductVariantOptionWhereInput!]
  NOT: [ProductVariantOptionWhereInput!]
  OR: [ProductVariantOptionWhereInput!]
  createdAt: DateTimeFilter
  id: StringFilter
  name: StringFilter
  productVariant: ProductVariantRelationFilter
  productVariantId: StringFilter
  updatedAt: DateTimeFilter
  values: StringNullableListFilter
}

input ProductVariantOrderByRelationAggregateInput {
  _count: SortOrder
}

input ProductVariantRelationFilter {
  is: ProductVariantWhereInput
  isNot: ProductVariantWhereInput
}

input ProductVariantWhereInput {
  AND: [ProductVariantWhereInput!]
  NOT: [ProductVariantWhereInput!]
  OR: [ProductVariantWhereInput!]
  createdAt: DateTimeFilter
  id: StringFilter
  name: StringFilter
  options: ProductVariantOptionListRelationFilter
  price: IntNullableFilter
  product: ProductRelationFilter
  productId: StringFilter
  stock: IntFilter
  updatedAt: DateTimeFilter
}

input ProductWhereInput {
  AND: [ProductWhereInput!]
  NOT: [ProductWhereInput!]
  OR: [ProductWhereInput!]
  avgRating: FloatNullableFilter
  cartItem: CartItemListRelationFilter
  category: ProductCategoryRelationFilter
  categoryId: StringFilter
  collections: CollectionListRelationFilter
  createdAt: DateTimeFilter
  description: StringNullableFilter
  id: StringFilter
  images: StringNullableListFilter
  name: StringFilter
  orderId: StringNullableFilter
  orderItem: OrderItemListRelationFilter
  price: IntFilter
  reviews: ProductReviewListRelationFilter
  slug: StringFilter
  updatedAt: DateTimeFilter
  variants: ProductVariantListRelationFilter
}

input ProductWhereUniqueInput {
  AND: [ProductWhereInput!]
  NOT: [ProductWhereInput!]
  OR: [ProductWhereInput!]
  avgRating: FloatNullableFilter
  cartItem: CartItemListRelationFilter
  category: ProductCategoryRelationFilter
  categoryId: StringFilter
  collections: CollectionListRelationFilter
  createdAt: DateTimeFilter
  description: StringNullableFilter
  id: String
  images: StringNullableListFilter
  name: StringFilter
  orderId: StringNullableFilter
  orderItem: OrderItemListRelationFilter
  price: IntFilter
  reviews: ProductReviewListRelationFilter
  slug: StringFilter
  updatedAt: DateTimeFilter
  variants: ProductVariantListRelationFilter
}

type ProductWithMeta {
  """Product"""
  data: Product!

  """Product metadata"""
  meta: ProductMeta!
}

type Query {
  cartById(id: ID!): CartWithMeta!
  carts(skip: Int = 0, take: Int = 20): [Cart!]!
  collection(id: ID, name: String, slug: String): Collection!
  collections(skip: Int = 0, take: Int = 10): [Collection!]!
  order(id: Int!): Order!
  orders: [Order!]!
  product(where: ProductWhereUniqueInput): ProductWithMeta!
  productCategories(skip: Int = 0, take: Int = 10): ProductCategoriesList!
  productCategory(id: ID, name: String, slug: String): ProductCategory!
  productCategoryById(id: ID!): ProductCategory!
  productReview(id: ID!): ProductReview!
  productReviews(orderBy: ProductReviewOrderByWithRelationInput, where: ProductReviewWhereInput): ProductReviewListWithMeta!
  productVariant(id: Int!): ProductVariant!
  productVariants: [ProductVariant!]!
  products(orderBy: ProductOrderByWithRelationInput, skip: Int = 0, take: Int = 10, where: ProductWhereInput): ProductList!
  productsByCategorySlug(skip: Int = 0, slug: String!, take: Int = 10): ProductList!
  productsByQuery(query: String!, skip: Int = 0, take: Int = 10): ProductList!
}

enum QueryMode {
  default
  insensitive
}

enum SortOrder {
  asc
  desc
}

input SortOrderInput {
  nulls: NullsOrder
  sort: SortOrder!
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input StringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

input StringNullableListFilter {
  equals: [String!]
  has: String
  hasEvery: [String!]
  hasSome: [String!]
  isEmpty: Boolean
}

input UpdateCartInput {
  """User ID"""
  userId: ID
}

input UpdateCartItemInput {
  """Cart ID"""
  cartId: ID

  """Product ID"""
  productId: ID

  """Product quantity"""
  quantity: Int
}

input UpdateCollectionInput {
  """Product collection cover image URL"""
  coverImage: String

  """Product collection description"""
  description: String
  id: Int!

  """Product collection name"""
  name: String

  """Product IDs in the collection"""
  productIds: [ID!]
}

input UpdateOrderInput {
  """Example field (placeholder)"""
  exampleField: Int
  id: Int!
}

input UpdateProductCategoryInput {
  """Product category name"""
  name: String

  """Parent category ID"""
  parentCategoryId: String
}

input UpdateProductInput {
  """Product rating"""
  avgRating: Float
  categoryId: String
  description: String
  images: [String!]
  name: String
  price: Float
}

input UpdateProductReviewInput {
  """Review content"""
  content: String

  """Review email"""
  email: String

  """Review headline"""
  headline: String
  id: ID!

  """Review author"""
  name: String

  """Review product id"""
  productId: ID

  """Review rating"""
  rating: Int
}

input UpdateProductVariantInput {
  id: ID!

  """Product variant name"""
  name: String

  """Product variant options"""
  options: [CreateProductVariantOptionInput!]

  """Product variant price"""
  price: Int

  """Product variant productId"""
  productId: String

  """Product variant stock"""
  stock: Int = 0
}

input UserRelationFilter {
  is: UserWhereInput
  isNot: UserWhereInput
}

input UserWhereInput {
  AND: [UserWhereInput!]
  NOT: [UserWhereInput!]
  OR: [UserWhereInput!]
  createdAt: DateTimeFilter
  email: StringFilter
  id: StringFilter
  name: StringFilter
  orders: OrderListRelationFilter
  password: StringFilter
  role: StringFilter
  updatedAt: DateTimeFilter
}